<?xml version="1.0" standalone="no"?>

<kickstart>


<description>
Xen support for the frontend Machine.
</description>


<copyright>
Copyright (c) 2000 - 2007 The Regents of the University of California.
All rights reserved. Rocks(tm) v4.3 www.rocksclusters.org
</copyright>


<changelog>
$Log: xen-server.xml,v $
Revision 1.30  2009/05/07 22:30:33  bruno
get the certs built correctly for libvirtd

Revision 1.29  2009/05/06 17:58:12  bruno
all can't be in CDATA

Revision 1.28  2009/05/04 21:11:50  bruno
speed up certtool

Revision 1.27  2009/04/08 22:27:58  bruno
retool the xen commands to use libvirt

Revision 1.26  2009/03/13 20:43:26  bruno
updated

Revision 1.25  2009/03/06 21:21:30  bruno
updated for host attributes

Revision 1.24  2009/02/13 18:24:00  bruno
better VM base MAC address creation.

fix bootaction

Revision 1.23  2009/02/11 19:03:50  bruno
create a locally administered base mac address that will be used by VMs.

this address is based on the public IP of the frontend.

Revision 1.22  2009/01/23 21:24:26  bruno
replaced var tags with entities

Revision 1.21  2009/01/09 22:07:22  bruno
added version and arch to xen initrd.img and vmlinuz

Revision 1.20  2008/12/16 00:45:04  bruno
merge vm_profiles and pxeaction tables into bootaction table

Revision 1.19  2008/11/21 18:37:29  bruno
make sure 'rocks report host xen bridge' is called when a frontend is
installing.

this properly sets up the xen bridge on the frontend that uses a restore roll.

Revision 1.18  2008/10/14 22:27:50  bruno
if a user selects the xen roll, then the frontend is a VM container that
can house VM frontends.

Revision 1.17  2008/09/04 21:26:33  bruno
use new bootprofile hotness

Revision 1.16  2008/09/04 17:38:33  bruno
typo fixed

Revision 1.15  2008/09/02 19:06:32  bruno
nEeDs tO Be CaSe sEnSiTiVe

Revision 1.14  2008/09/01 18:59:09  phil
Get the right path to the xen initrd image

Revision 1.13  2008/09/01 18:50:49  phil
One missing 0 in a ramdisk can ruin your whole day

Revision 1.12  2008/09/01 05:30:23  phil
add the install bootprofile.  Need to take details out rocks report host vm

Revision 1.11  2008/08/27 22:22:02  bruno
add a 'Hosted VM' appliance

Revision 1.10  2008/08/14 16:17:19  phil
Control how much memory is reserved for Dom0 via a rocks var

Revision 1.9  2008/07/18 20:49:07  bruno
now have ability to build any appliance from rocks 'boot:' prompt. just
type 'bulid appliance=xml-node-name', for example:
'build appliance=vm-container-sever'

change 'boot:' directive of 'frontend' to 'build'

Revision 1.8  2008/04/17 22:59:42  bruno
move the bootflag setting into xen-server.xml

Revision 1.7  2007/12/03 19:48:51  bruno
xen for V

Revision 1.6  2007/06/23 04:04:07  mjk
mars hill copyright

Revision 1.5  2006/09/11 22:50:48  mjk
monkey face copyright

Revision 1.4  2006/08/10 00:12:24  mjk
4.2 copyright

Revision 1.3  2006/01/27 20:36:47  bruno
moved curses and ncurses-devel into base roll

ncurses-devel is needed to correct build foundation-python

Revision 1.2  2005/12/30 16:47:30  mjk
copyrights in place

Revision 1.1  2005/12/17 05:27:19  mjk
*** empty log message ***

</changelog>


<package>roll-xen-usersguide</package>
<package>rocks-command-xen</package>


<post>

/opt/rocks/bin/rocks add appliance vm-container \
	membership='VM Container' node='vm-container-client' graph='default' \
	public='yes'

/opt/rocks/bin/rocks add appliance hosted-vm \
	membership='Hosted VM' public='no'

/opt/rocks/bin/rocks set appliance attr vm-container Xen_Dom0MinMem 768
/opt/rocks/bin/rocks set host bootflags flags="dom0_mem=1024M"

/opt/rocks/bin/rocks add bootaction action="install vm" \
	kernel="file:///boot/kickstart/xen/vmlinuz-&rocks_version;-&arch;" \
	ramdisk="file:///boot/kickstart/xen/initrd-xen.iso.gz-&rocks_version;-&arch;" \
	args="ks ramdisk_size=1500000 lang= devfs=nomount kssendmac selinux=0 noipv6"

/opt/rocks/bin/rocks add bootaction action="install vm frontend" \
	kernel="file:///boot/kickstart/xen/vmlinuz-&rocks_version;-&arch;" \
	ramdisk="file:///boot/kickstart/xen/initrd-xen.iso.gz-&rocks_version;-&arch;" \
	args="ramdisk_size=150000 lang= devfs=nomount pxe kssendmac selinux=0 noipv6 ks=http://&Kickstart_PublicHostname;/install/sbin/kickstart.cgi ksdevice=eth1 build"

</post>

<post>

<!-- Create the rocks-network-bridge script for xen --> 
/opt/rocks/bin/rocks report host xen bridge &hostname; | \
        /opt/rocks/bin/rocks report script > /tmp/do-xen-bridge.sh

chmod a+x /tmp/do-xen-bridge.sh
/tmp/do-xen-bridge.sh

</post>


<post arg="--interpreter /opt/rocks/bin/python">
<![CDATA[
#
# calculate the VM MAC base address
#
import os

]]>
a = '&Kickstart_PublicAddress;'
<![CDATA[

ip_octets = []

#
# toss the first octect
#
for i in a.split('.')[1:]:
	ip_octets.append(int(i))

#
# now reverse the octects. this puts the most unique part of the IP address
# in the most significant octect of the MAC address. this will be useful
# if multiple clusters in the same organization have more than 16,777,216
# VMs.
#
ip_octets.reverse()

#
# save the last two bits of the first octet
#
locally_administered_bit = 0x2
multicast_bit = 0x1

last_two = ip_octets[0] & (locally_administered_bit | multicast_bit)

#
# turn off the locally administered bit and multicast bit
#
p = ip_octets[0] & ~(locally_administered_bit | multicast_bit)

#
# set the locally administered bit
#
p |= locally_administered_bit

prefix = []
prefix.append('%x' % p)

#
# now set the next 2 octets
#
for a in range(1, 3):
	prefix.append('%x' % ip_octets[a])

#
# the 4th octet is also a special case. it is the last two bits of the first
# octet
#
prefix.append('%x' % (last_two << 6))

#
# the fifth and sixth octet are 00
#
prefix.append('00')
prefix.append('00')

vm_mac_base_addr = ':'.join(prefix)
os.system('/opt/rocks/bin/rocks set attr vm_mac_base_addr %s' % \
	(vm_mac_base_addr))
]]>
</post>

<post>
/opt/rocks/bin/rocks set attr vm_mac_base_addr_mask ff:ff:ff:c0:00:00
</post>


<post>

<!--
	make a CA for creating certificates in order to securely talk to 
	remote libvirtd processes
-->

mkdir -p /etc/pki/CA/private

<!-- speed up certtool -->
mv /dev/random /dev/random.orig
ln -s /dev/urandom /dev/random

/usr/bin/certtool --generate-privkey > /etc/pki/CA/private/cakey.pem

<file name="/tmp/ca.info">
cn = &Info_CertificateOrganization;
ca
cert_signing_key
</file>

/usr/bin/certtool --generate-self-signed \
	--load-privkey /etc/pki/CA/private/cakey.pem \
	--template /tmp/ca.info --outfile /etc/pki/CA/cacert.pem

/bin/rm -f /tmp/ca.info

<!-- make sure apache can read the CA files -->

chmod 750 /etc/pki/CA
chown root.apache /etc/pki/CA
chmod 750 /etc/pki/CA/private
chown root.apache /etc/pki/CA/private
chmod 440 /etc/pki/CA/private/cakey.pem
chown root.apache /etc/pki/CA/private/cakey.pem


<!-- restore original system -->
rm /dev/random
mv /dev/random.orig /dev/random

</post>

<post>

<!-- set up a temp CA key for the common cert creations in xen-base -->
cp /etc/pki/CA/private/cakey.pem /tmp/cakey.pem

</post>

</kickstart>

