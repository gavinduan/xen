#!/opt/rocks/bin/python
#
# @Copyright@
# 
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		       version 5.2 (Chimichanga)
# 
# Copyright (c) 2000 - 2009 The Regents of the University of California.
# All rights reserved.	
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
# 
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement: 
# 
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
# 
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @Copyright@
#
# $Log: rocks-create-vlan,v $
# Revision 1.3  2009/05/01 19:07:35  mjk
# chimi con queso
#
# Revision 1.2  2008/10/18 00:56:24  mjk
# copyright 5.1
#
# Revision 1.1  2008/09/22 18:12:35  bruno
# added script to create vlans with xen bridges
#
#

import sys
import string
import os

def ifdown(device):
	cmd = '/sbin/ip link show %s' % (device)
	done = 0
	while not done:
		os.system('/sbin/ip link set %s down' % (device))
		for line in os.popen(cmd).readlines():
			l = line.split()
			if len(l) > 2 and l[1] == '%s:' % (device):
				status = l[2][1:-1].split(',')
				if 'UP' not in status:
					done = 1

#
# main 
#
if len(sys.argv) != 2:
	sys.exit(0)

vlan = sys.argv[1]
v = vlan.split('.')
if len(v) > 1:
	phys = v[0]
	vlanid = v[1]
else:
	sys.exit(0)

#
# get the MAC of the physical interface
#
mac = None
for line in os.popen('/sbin/ip addr show %s' % (phys)).readlines():
	l = line.split()
	if len(l) > 1 and l[0] == 'link/ether':
		mac = l[1]
		break

if not mac:
	sys.exit(0)

#
# xen renames eth0 to peth0, let's undo that
#
ifdown(phys)
os.system('/sbin/ip link set %s name rocks-%s' % (phys, phys))

ifdown('p%s' % (phys))
os.system('/sbin/ip link set p%s name %s' % (phys, phys))

#
# restore the mac address
#
os.system('/sbin/ip link set %s addr %s' % (phys, mac))

os.system('/sbin/ip link set %s up' % (phys))

#
# create the vlan
#
os.system('/sbin/vconfig add %s %s' % (phys, vlanid))

#
# now restore the xen interface mappings (e.g., eth0 -> peth0)
#
ifdown(phys)
os.system('/sbin/ip link set %s name p%s' % (phys, phys))
os.system('/sbin/ip link set rocks-%s name %s' % (phys, phys))

os.system('/sbin/ip link set p%s addr fe:ff:ff:ff:ff:ff' % (phys))

#
# flush the interfaces
#
os.system('/sbin/ip addr flush dev %s' % (phys))
os.system('/sbin/ip addr flush dev p%s' % (phys))

#
# bring up the interfaces
#
os.system('/sbin/ip link set p%s up' % (phys))
os.system('/sbin/ip link set %s up' % (phys))

os.system('/sbin/ip link set %s up' % (vlan))
#
# settings for the new vlan
#
os.system('/sbin/ip link set %s arp on' % (vlan))
os.system('/sbin/ip link set %s multicast on' % (vlan))
os.system('/sbin/ip link set %s promisc off' % (vlan))

os.system('/sbin/ifup %s' % (phys))

