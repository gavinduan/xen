#!/opt/rocks/bin/python
#
# This is program is used to create disks for VMs. It serves as a helper
# program to rocks-pygrub.
#
# @Copyright@
# 
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		         version 5.6 (Emerald Boa)
# 		         version 6.1 (Emerald Boa)
# 
# Copyright (c) 2000 - 2013 The Regents of the University of California.
# All rights reserved.	
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
# 
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement: 
# 
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
# 
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @Copyright@
#
# $Log: rocks-create-vm-disks,v $
# Revision 1.7  2012/11/27 00:49:42  phil
# Copyright Storm for Emerald Boa
#
# Revision 1.6  2012/05/06 05:49:53  phil
# Copyright Storm for Mamba
#
# Revision 1.5  2012/03/17 03:01:04  clem
# Now rocks-create-vm-disks support both kvm and xen
#
# Revision 1.4  2011/07/23 02:31:46  phil
# Viper Copyright
#
# Revision 1.3  2010/09/07 23:53:34  bruno
# star power for gb
#
# Revision 1.2  2009/05/01 19:07:35  mjk
# chimi con queso
#
# Revision 1.1  2009/04/08 19:18:57  bruno
# retooled rocks-pygrup to work with libvirt
#
#

import os
import os.path
import sys
import string
import tempfile
import urllib
import getopt
import pwd

try:
	opts, args = getopt.gnu_getopt(sys.argv[1:], '',
		[ "hostname=" ] )
except getopt.GetoptError:
	sys.exit(1)

#
# get the hostname
#
hostname = None
for o, a in opts:
	if o in ("--hostname",):
		hostname = a

if hostname == None:
	print "must supply a host name"

#
# parameters from the config file that pertain to disks
#
vmParameters = { 'disk' : [], 'disksize' : [] }

vmKernelConfig = '/etc/xen/rocks/%s' % hostname

#
# Read vmKernelConfig file.
#
try: 
	file = open(vmKernelConfig, 'r')
	output = []
	for line in file.readlines():
		if not line or len(line) <= 1:
			token = ''
			val = ''
		elif line.find('=') >= 0 :
			(token, val) = line.split('=', 1)
		else:
			(token, val) = (line, '')

		token = token.strip()
		val = val.strip()

		if vmParameters.has_key(token):
			if token == 'disk':
				vmParameters[token].append(val)
			elif token == 'disksize':
				#
				# disk size is in GB
				#
				v = int(val) * 1000 * 1000 * 1000
				vmParameters[token].append(v)
			else:
				vmParameters[token] = val

	file.close()

except:
	pass		

#
# Create the disk file(s), if it doesn't exist
#
kvm=False
try:
	pwd.getpwnam("qemu")[2]
	#kvm we need to change ownership
	kvm=True
except:
	pass
i = 0
for diskfile in vmParameters['disk']:
	if not os.path.exists(diskfile):
		if not os.path.exists(os.path.dirname(diskfile)):
			os.makedirs(os.path.dirname(diskfile), 0700)
		if kvm:
			cmd = "chown qemu " + os.path.dirname(os.path.dirname(diskfile))
			os.system(cmd)
			cmd = "chown qemu " + os.path.dirname(diskfile)
			os.system(cmd)

		cmd = 'dd if=/dev/zero of=%s bs=1 count=1 ' % diskfile
		cmd += 'seek=%d ' % (vmParameters['disksize'][i] - 1)
		cmd += '> /dev/null 2>&1'
		os.system(cmd)
		if kvm:
			#qemu system we need to change file ownership
			cmd = "chown qemu:qemu " + str(diskfile)
			os.system(cmd)

	i += 1

