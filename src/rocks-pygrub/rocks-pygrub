#!/opt/rocks/bin/python
#
# This is wrapper around pygrub, which is distributed with Xen.
# It's purpose is to allow us to write a single xen config file, but make
# reboots of a VM sensible (that is closer to real hardware functionality)
#
# if a diskimage,<disktype> exists, then the config file
# diskimage.cfg determines how rocks-pygrub operates.
#
# The key directive is in the diskimage.cfg file is:
#           forceInstall=True
#
# This will cause the diskimage to enter install mode on the next reboot.
# Rocks-pygrub will remove this line from the cfg file, so it effectively
# functions as a one-shot and is similar in spirit to hitting F12 on a keyboard
# to force a PXE boot
#
# Other Supported directives in the cfg file are
#             bootKernel =
#             bootRamdisk =
#             bootArgs =
#             installKernel =
#             installRamdisk =
#             installArgs =
# Logic is as follows:
#      if cfg file is empty/non-existent -- boot using pygrub
#      if diskfile is non-existent -- create it, and force installation
#      if forceInstall=False
#             if bootKernel = '' -- use pygrub
# @Copyright@
# 
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		         version 5.6 (Emerald Boa)
# 		         version 6.1 (Emerald Boa)
# 
# Copyright (c) 2000 - 2013 The Regents of the University of California.
# All rights reserved.	
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
# 
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement: 
# 
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
# 
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @Copyright@
#
# $Log: rocks-pygrub,v $
# Revision 1.12  2012/11/27 00:49:42  phil
# Copyright Storm for Emerald Boa
#
# Revision 1.11  2012/05/06 05:49:53  phil
# Copyright Storm for Mamba
#
# Revision 1.10  2011/07/23 02:31:46  phil
# Viper Copyright
#
# Revision 1.9  2010/09/07 23:53:34  bruno
# star power for gb
#
# Revision 1.8  2009/05/01 19:07:35  mjk
# chimi con queso
#
# Revision 1.7  2009/04/08 19:18:57  bruno
# retooled rocks-pygrup to work with libvirt
#
# Revision 1.6  2009/01/09 22:07:58  bruno
# get the installation vmlinuz and initrd.img from the database
#
# Revision 1.5  2008/10/18 00:56:24  mjk
# copyright 5.1
#
# Revision 1.4  2008/08/29 21:21:45  phil
# Phil still can't type
#
# Revision 1.3  2008/08/29 21:20:02  phil
# Phil can't type
#
# Revision 1.2  2008/08/29 21:17:38  phil
# fix some parsing
#
# Revision 1.1  2008/08/29 18:57:03  phil
# First round of rocks-pygrub
#
# Revision 1.19  2008/03/06 23:41:33  mjk
#
import os
import os.path
import sys
import string
import tempfile
import urllib
import getopt

try:
	opts, args = getopt.gnu_getopt(sys.argv[1:], 'q',
		[ "quiet", "output=", "hostname=" ] )
except getopt.GetoptError:
	sys.exit(1)

if len(args) < 1:
	sys.exit(1)

outfile = None

#
# get the hostname
#
for o, a in opts:
	if o in ("--hostname",):
		hostname = a
	elif o in ("--output",):
		outfile = a

#
# Defaults for booting a Xen image
#
vmParameters = {'forceInstall': 'no',
		'bootKernel': '',
		'bootRamdisk':'',	
		'bootArgs': '',
		'installKernel': '',
		'installRamdisk' : '',
		'installArgs' : '',
		'disk' : [],
		'disksize' : [] }

vmKernelConfig = '/etc/xen/rocks/%s' % hostname

#
# Read vmKernelConfig file. Don't fail out if it's not there -- already have
# defaults.
#
try: 
	file = open(vmKernelConfig, 'r')
	output = []
	for line in file.readlines():
		if not line or len(line) <= 1:
			token = ''
			val = ''
		elif line.find('=') >= 0 :
			(token, val) = line.split('=', 1)
		else:
			(token, val) = (line, '')

		token = token.strip()
		val = val.strip()

		if vmParameters.has_key(token):
			if token == 'disk':
				vmParameters[token].append(val)
			elif token == 'disksize':
				#
				# disk size is in GB
				#
				v = int(val) * 1000 * 1000 * 1000
				vmParameters[token].append(v)
			else:
				vmParameters[token] = val

		#
		# re-write the config file, but make sure that 'forceInstall'
		# is not in the new config file
		#
		if token.lower() != 'forceinstall':
			output.append(line) 

	file.close()
	file = open(vmKernelConfig, 'w')
	file.writelines(output)
	file.close()

except:
	pass		

#
# Create the disk file, if it doesn't exist, force Install if creating
#
i = 0
for diskfile in vmParameters['disk']:
	if not os.path.exists(diskfile):
		if not os.path.exists(os.path.dirname(diskfile)):
			os.makedirs(os.path.dirname(diskfile), 0700)

		cmd = 'dd if=/dev/zero of=%s bs=1 count=1 ' % diskfile
		cmd += 'seek=%d ' % (vmParameters['disksize'][i] - 1)
		cmd += '> /dev/null 2>&1'
		os.system(cmd)

		vmParameters['forceInstall'] = 'yes'

	i += 1

#
# Choose the right kernel, initrd
#
if vmParameters['forceInstall'] == 'yes':
	bootargs = 'installArgs'
	bootkernel = 'installKernel'
	bootramdisk = 'installRamdisk'
else:
	bootargs = 'bootArgs'
	bootkernel = 'bootKernel'
	bootramdisk = 'bootRamdisk'

#
# Make a temporary directory and then wget the kernel and the initial ramdisk
# now try to wget the kernel and ramdisk that we just chose
#
tmpdir = tempfile.mkdtemp(dir='/tmp')

#
# try to retrieve the kernel and ramdisk via url
#
kernel = os.path.basename(vmParameters[bootkernel])
ramdisk = os.path.basename(vmParameters[bootramdisk])
pygrubKernel = ''
pygrubRamdisk = ''

if kernel:
	pygrubKernel = os.path.join(tmpdir, kernel)
	try:
		urllib.urlretrieve(vmParameters[bootkernel], pygrubKernel)
	except:
		pygrubKernel = ''

if ramdisk:
	pygrubRamdisk = os.path.join(tmpdir, ramdisk)
	try:
		urllib.urlretrieve(vmParameters[bootramdisk], pygrubRamdisk)
	except:
		pygrubRamdisk = ''

#
# if we have a pygrubKernel, then construct output, else call pygrub
#
if pygrubKernel:
	rval = "linux (kernel %s)" % pygrubKernel 

	if pygrubRamdisk:
		rval += "(ramdisk %s)" % pygrubRamdisk 

	if vmParameters[bootargs]:
		rval += "(args \"%s\")" % vmParameters[bootargs] 
else:
	#
	# Construct the pygrub command line
	#
	pygrubCmd = '/usr/bin/pygrub -q '
	if vmParameters[bootargs]:
		pygrubCmd += '--args \"%s\" ' % vmParameters[bootargs]

	pygrubCmd += vmParameters['disk'][0]

	#
	# now call pygrub
	#
	rval = ''
	try:
		output = os.popen(pygrubCmd)
		for line in output.readlines():
			rval += line 
	except: 
		pass 

#
# print out the returned value (either calling pygrub or our construction)
#
if outfile == None or outfile == '-':
	print rval
else:
	file = open(outfile, 'w')
	file.write(rval)
	file.close()

